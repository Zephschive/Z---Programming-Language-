expr    : KEYWORD:VAR IDENTIFIER EQ expr
        : comp-expr(KEYWORD:AND|KEYWORD:OR)comp-expr)*

comp-expr        : arith-expr((<>=))arith-expr)*

arith-expr :term ((PLUS|MINUS) term)*

term    : factor ((MUL|DIV) factor)*

factor	: (PLUS|MINUS) factor
		: power

power		: call (POW factor)*

call        : atom (LPAREN  (expr (COMMA expr)*) RPAREN) ?


atom 		: INT|FLOAT
			: LPAREN expr RPAREN
			: if-expr
			: for-expr
			: while-expr
			: func-expr


if statement
zif <condition> zen <expression>	zelif <condition> zen <expression> zelse <expressions>






IDENTIFIER
KEYWORD
EQ



VAR        variable_name     =            <expr>
^			     ^           ^
KEYWORD     IDENTIFIER      EQULS



zvar a = 5


5 == 6
false = 0
6==6
true =1

for loop
zor <var_name> == <start value> zto <end_value> zen <expr>


zvar result = 1
zor i = 0 zto 10 zen result = result * i



while loop
zile <condition> zen <expr>


function
func-def : KEYWORD : FUN IDENTIFIER?
         : LPAREN(IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
           ARROW expr


"Text"
"Text "
